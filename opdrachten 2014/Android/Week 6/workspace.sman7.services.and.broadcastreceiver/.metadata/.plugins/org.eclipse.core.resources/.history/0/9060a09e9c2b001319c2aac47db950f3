package com.benziedroid.locationspider;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Locale;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.app.IntentService;
import android.content.Intent;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.telephony.TelephonyManager;
import android.util.Log;

public class LocationSpiderService extends IntentService {


	public LocationSpiderService() {
		super("LocationSpiderService");
	}

	@Override
	protected void onHandleIntent(Intent intent) {
		LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);

		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_COARSE);



		String provider = locationManager.getBestProvider(criteria, true);
		if(!locationManager.isProviderEnabled(provider)) {
			Log.d(Configuration.TAG, String.format("%s is not enabled",provider));
			return;
		}

		Location lastKnownLocation = locationManager.getLastKnownLocation(provider);
		if(lastKnownLocation == null) {
			Log.d(Configuration.TAG, String.format("Provider %s has no last known location.",provider));
			return;
		}

		TelephonyManager telephonyManager = (TelephonyManager) getSystemService(TELEPHONY_SERVICE);
		String deviceId = telephonyManager.getDeviceId();

		Log.d(Configuration.TAG, String.format("Provider %s (lat,lon) = (%g, %g)", provider,
				lastKnownLocation.getLatitude(), lastKnownLocation.getLongitude()));
		sendReportToServer(deviceId, lastKnownLocation);
	}

	private void sendReportToServer(String deviceId, Location lastKnownLocation) {
		new SendToServerTask(deviceId, lastKnownLocation).execute();
	}

	class SendToServerTask extends AsyncTask<Void,Void,Void> {
		private static final String baseUrl = "http://192.168.2.37:8080/LocationSpy/";
		private static final String insertUrl = baseUrl + "spyMessage/insert";
		private String deviceId;
		private Location location;

		public SendToServerTask(String deviceId, Location location) {
			this.deviceId = deviceId;
			this.location = location;
		}

		@Override
		protected Void doInBackground(Void... params) {
			String result = "";

			try {
				ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
				nameValuePairs.add(new BasicNameValuePair("deviceId", deviceId));
				nameValuePairs.add(new BasicNameValuePair("latitude", String.format(Locale.US, "%g",location.getLatitude())));
				nameValuePairs.add(new BasicNameValuePair("longitude", String.format(Locale.US, "%g",location.getLongitude())));

				UrlEncodedFormEntity urlEncodedFormEntity = new UrlEncodedFormEntity(nameValuePairs);

				result = postToAndGetResult(insertUrl, urlEncodedFormEntity);
			} catch (UnsupportedEncodingException e) {
				appendExceptionToLog("UnsupportedEncodingException",e);
			}

			Log.d(Configuration.TAG, "Network send " + result);

			return null;
		}

		private String postToAndGetResult(String url, HttpEntity httpEntity){
			String result = "NOK";

			try {
				DefaultHttpClient client = new DefaultHttpClient();
				HttpPost post = new HttpPost(url);
				post.setEntity(httpEntity);

				ResponseHandler<String> responseHandler = new BasicResponseHandler();
				result = client.execute(post,responseHandler);

			} catch (ClientProtocolException e) {
				appendExceptionToLog("ClientProtocalException",e);
			} catch (IOException e) {
				appendExceptionToLog("IOException",e);
			}

			return result;
		}


		private void appendExceptionToLog(String message, Exception e) {
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			Log.d(Configuration.TAG, sw.toString());
		}
	}
}
